00:00:02	introduction to link hashmap in Java introduction to maps in Java hello everyone we're going to um look at different implementation of the map interface uh and for map interface there are other implementations such as hashmap tree map and our Focus for today will be linked hashmap each implementation has its unique features hashmap is known for its speed tree map is known for being able to sort its keys and linked hashmap combines hashtable efficiency with a link list to maintain insertion order purpose of Link hashmap so the

00:01:01	link hashmap is designed specifically to maintain the order of elements as they are inserted which is something uh hashmap doesn't offer and this feature makes link hashmap particularly useful uh in scenarios where the order of data is important so uh ex example Le could be caching mechanism or maintaining a predictable iteration order here is a code snippet to show how you can create link tach map and uh add items in there and iterate characteristics of link hashmap so link hashmap maintains a

00:02:01	doubly link list uh by maintaining a dou link list it makes it possible to retrieve elements in the order they were inserted without sacrificing the performance benefits of hashing the operations like get put and remove have a Time complexity of 01 under typical condition which is uh incredibly efficient internal working of link hashmap so internally link hashmap uh uses an entry class that extends hashmap entry and this class includes two additional references for the next and pre previous entries in the list and

00:03:03	this enables the order maintenance and there are also two modes of order available uh insertion order which is the default you have and access order which can be enabled through the Constructor and access order what it does does is rearranges entries based on their last exit so insertion order mode um which the entries in the map appears in the exact order they were added but in Access order mode the map reorders these entries each time they are accessed which is uh particularly useful if you are designing like caches least

00:04:10	recently used caches and uh feel free to take a look at reference to see learn more about these difference order mode practical use cases of Link TM so one uh common use of link hashmap is in the implementation of caches where it is important to remove the oldest accessed item such as in memory management scenarios and another use uh would be if you have an application that requires a predictable iteration order here are real examples of Link hashmap uses so let's think about a web service that

00:05:13	logs users access then uh you can use a link hashmap to store this data and by doing that you allow the service to easily retrieve or display the most recent accesses in the exact order they occurred another example would be handling HTTP requests where maintaining the order of parameters can be important for processing code demonstration basic operation so you can see that um you can create a link hashmap and add entries by calling putut method and also take a look at how iteration over the map entries will uh display

00:06:18	items in the order they were added unless access order is specified uh try running this example and when access order is set to True uh accessing an item will move it to the end of the list uh it demonstrates uh its Dynamic reordering code demonstration implementing a simple cache so we talked about lru cach as an example so here is a simple example uh what you want to do is you want to use access order mode uh so you want to set this to be true to automatically move the most recently accessed items to

00:07:15	the end of the list and when the cash reaches capacity the oldest entry can be removed first so it demonstrates uh efficient cash management best practices for using link hashmap so linked hashmap is ideal when you need the performance of a hashmap but also care about the order of entries but it's important to consider the memory overhead um due to the maintenance of a linked list in a addition to the hash table so choose link hashmap only if order is maintaining order is necessary otherwise a regular hashmap might be

00:08:14	more memory efficient thank you everyone for listening

